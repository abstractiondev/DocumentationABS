<#@ template debug="true" hostSpecific="true" language="C#v3.5" #>
<#@ output extension=".html" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="..\Common\CommonCodeblocks.ttinclude" #>
<#@ include file="Documentation_v1_0.ttinclude" #>
<#   
	GenerateDocument(CurrentDocument);
#>
<#+ 
	public string CurrentXmlFile;
	
	public Tuple<string, string>[] GetGeneratorContent(params string[] xmlFileNames)
	{
		List<DocumentFile> result = new List<DocumentFile>();
		foreach(string xmlFileName in xmlFileNames)
		{
			DocumentationAbstractionType abs = LoadXml<DocumentationAbstractionType>(xmlFileName);
			foreach(DocumentType doc in abs.Documentations.Documents) {
				DocumentFile docFile = GenerateDocumentFile(doc);
				result.Add(docFile);
			}
		}
		return result.Select(docFile => Tuple.Create(docFile.Name, docFile.Content)).ToArray();
	}
	
	void GenerateDocument(DocumentType document)
	{
		GenerateHtmlAndHeadWithStyle();
		GenerateBodyStart();
		GenerateBody(document);
		GenerateBodyEnd();
	}
	
	private DocumentType CurrentDocument;
	
	public DocumentFile GenerateDocumentFile(DocumentType document)
	{
		DocumentFile result = new DocumentFile();
		GenerationEnvironment.Clear();
		result.Name = document.name + ".doc";
		CurrentDocument = document;
		result.Content = TransformText();
		return result;
	}
	
	public DocumentFile[] GenerateDocuments()
	{
		List<DocumentFile> result = new List<DocumentFile>();
		string templateDirectoryName = Path.GetDirectoryName(Host.TemplateFile);
		string directoryName = templateDirectoryName + @"\Content_v1_0";
		directoryName = directoryName.Replace("DocumentationABS", "AbstractionContent");
		string[] xmlFileNames = Directory.GetFiles(directoryName, "*.xml");
		foreach(string xmlFileName in xmlFileNames)
		{
			DocumentationAbstractionType abs = LoadXml<DocumentationAbstractionType>(xmlFileName);
			foreach(DocumentType doc in abs.Documentations.Documents) {
				DocumentFile docFile = GenerateDocumentFile(doc);
				result.Add(docFile);
			}
		}
		return result.ToArray();
	}
	
	void GenerateBody(DocumentType document)
	{
		GenerateTitle(document.title);
		//GenerateTOC(abstraction);
		foreach(HeaderType header in document.Content ?? new HeaderType[0])
			GenerateHeaderAndContent(header);
	}
	
	void GenerateHeaderAndContent(HeaderType header)
	{
		string headerBeginTag = "<h" + header.level + ">";
		string headerEndTag = "</h" + header.level + ">";
		#>
<#= headerBeginTag #><#= header.text #><#= headerEndTag  #>
		<#+
		if(header.Paragraph != null)
		{
			foreach(ParagraphType paragraph in header.Paragraph)
			{
				GenerateParagraph(new object[] { paragraph.Item });
			}
		}
		foreach(HeaderType subHeader in header.Header ?? new HeaderType[0])
			GenerateHeaderAndContent(subHeader);
	}
	
	void GenerateParagraphText(TextType text)
	{
		if(text.TextContent == null)
			return;
		string styleText = text.styleRef != null ? " style=\"" + text.styleRef + "\"" : "";
		#>
		<div class="MsoNormal"<#= styleText #> >
		<#= text.TextContent #>
		</div>
		<#+
	}
	
	void GenerateParagraphTable(TableType table)
	{
		GenerateTableWithContents(() =>
		{
			string[] headerData = table.Columns.Select(col => col.name).ToArray();
			GenerateTableHeaderRow(headerData);
			if(table.Rows != null) 
			{
				foreach(TextType[] colData in table.Rows)
					GenerateTableRowFromData(colData);
				//	GenerateTableRowFromData
			}
		});
	}
	
	void GenerateParagraph(object[] items)
	{
		#><p><#+
		foreach(object item in items ?? new object[0]) 
		{
			TextType text = item as TextType;
			TableType table = item as TableType;
			if(text != null)
				GenerateParagraphText(text);
			else if(table != null)
				GenerateParagraphTable(table);
			else
				throw new NotSupportedException("Paragraph type: " + item.GetType().Name);
		}
		#></p><#+
	}
	
	void GenerateTitle(string title)
	{
		if(title == null)
			throw new ArgumentNullException("title");
		#>
<div style='border:none;border-bottom:solid #4F81BD 1.0pt;padding:0cm 0cm 4.0pt 0cm'>
<p class="MsoTitle"><#= title #></p>
</div>
		<#+
	}
	
	void GenerateTableHeaderRow(params string[] data)
	{
		string rowStr = "<tr>" + String.Join("", data.Select(item => "<th><div class=MsoNormal>" + item + "</div></th>").ToArray()) + "</tr>";
		#>
		<#= rowStr #>
		<#+
		}

	void GenerateTableRowFromData(params TextType[] data)
	{
		#>
		<tr>
		<#+
		foreach(TextType text in data)
		{
		#>
		<td>
		<#+ GenerateParagraphText(text); #>
		</td>
		<#+
		}
		#>
		</tr>
		<#+
	}

	
	void GenerateTableRowFromData(string color, params string[] data)
	{
		#>
		<tr>
		<#+
		foreach(string item in data)
		{
			string rowStr = "<td><div class=MsoNormal style=\"color:" + color + "\">" + item + "</div></td>";
		#>
		<#= rowStr #>
		<#+
		}
		#>
		</tr>
		<#+
	}
/*	
	string GetStatusColor(Operation_v1_0.VariableTypeState state)
	{
		return GetStatusColor(state.ToString());
	}*/
	
	string GetStatusColor(string stateString)
	{
		switch(stateString)
		{
			case "underDesign":
				return "red";
			case "designApproved":
				return "blue";
			case "implemented":
				return "black";
			default:
				throw new NotSupportedException("StateString: " + stateString);
		}
	}
	
	void GenerateTableSectionWithContents(string sectionHeaderType, string sectionTitle, Action populateContents)
	{
		string sectionTagName = ""; // GetOperationTagName(sectionTitle);
		#>
<<#= sectionHeaderType #>><a name="<#= sectionTagName #>"><span lang=EN-US><#= sectionTitle #></span></a></<#= sectionHeaderType #>>
<p class=MsoNormal>
<#+
		GenerateTableWithContents(populateContents);
#>
</p>
		<#+
	}
	
	void GenerateTableWithContents(Action populateContents)
	{
		#>
<table border="1">
		<#+
		populateContents();		
		#>
</table>
		<#+
	}

	/*
	void GenerateOperationParameters(Operation_v1_0.ParametersType parameters)
	{
		GenerateTableSectionWithContents("h2", "Parameters", () => {
			GenerateTableHeaderRow("Name", "DataType", "Description");
			foreach(var parameter in parameters.Parameter)
				GenerateTableRowFromData(GetStatusColor(parameter.state), parameter.name, parameter.dataType, parameter.designDesc);
		});
		
		if(parameters.Items == null)
			return;
		GenerateTableSectionWithContents("h2", "Parameter Preparation", () => {
			GenerateTableHeaderRow("Name", "Affected Parameter(s)", "Description");
			foreach(object obj in parameters.Items)
			{
				Operation_v1_0.ValidationType validationItem = obj as Operation_v1_0.ValidationType;
				Operation_v1_0.ModificationType modificationItem = obj as Operation_v1_0.ModificationType;
				if(validationItem != null) {
					GenerateTableRowFromData(GetStatusColor(validationItem.state), 
						validationItem.name, GetTargetList(", ", validationItem.Target), validationItem.designDesc);
				} else if(modificationItem != null) {
					GenerateTableRowFromData(GetStatusColor(modificationItem.state), 
						modificationItem.name, GetTargetList(", ", modificationItem.Target), modificationItem.designDesc);
				} else 
					throw new NotSupportedException("Preparing item type: " + obj.GetType().Name);
			}
		});
	}*/

	void GenerateBodyStart()
	{
		#>
<body lang=EN link=blue vlink=purple>

<div class=WordSection1>

		
		<#+
	}

	void GenerateBodyEnd()
	{
		#>
</div>

</body>
</html>
		
		<#+
		
	}
	
	void GenerateHtmlAndHeadWithStyle()
	{
		string charset = System.Text.Encoding.UTF8.WebName;
		#>
<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=<#= charset #>">
<meta name=Generator content="Microsoft Word 14 (filtered)">

<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:10.0pt;
	margin-left:0cm;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:24.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Cambria","serif";
	color:#365F91;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:10.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-top:10.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:0cm;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:11.0pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:22.0pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{mso-style-link:"Title Char";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:15.0pt;
	margin-left:0cm;
	border:none;
	padding:0cm;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
p.MsoTitleCxSpFirst, li.MsoTitleCxSpFirst, div.MsoTitleCxSpFirst
	{mso-style-link:"Title Char";
	margin:0cm;
	margin-bottom:.0001pt;
	border:none;
	padding:0cm;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
p.MsoTitleCxSpMiddle, li.MsoTitleCxSpMiddle, div.MsoTitleCxSpMiddle
	{mso-style-link:"Title Char";
	margin:0cm;
	margin-bottom:.0001pt;
	border:none;
	padding:0cm;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
p.MsoTitleCxSpLast, li.MsoTitleCxSpLast, div.MsoTitleCxSpLast
	{mso-style-link:"Title Char";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:15.0pt;
	margin-left:0cm;
	border:none;
	padding:0cm;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{mso-style-link:"Balloon Text Char";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:8.0pt;
	font-family:"Tahoma","sans-serif";}
p.MsoTocHeading, li.MsoTocHeading, div.MsoTocHeading
	{margin-top:24.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Cambria","serif";
	color:#365F91;
	font-weight:bold;}
span.TitleChar
	{mso-style-name:"Title Char";
	mso-style-link:Title;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Cambria","serif";
	color:#365F91;
	font-weight:bold;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
span.BalloonTextChar
	{mso-style-name:"Balloon Text Char";
	mso-style-link:"Balloon Text";
	font-family:"Tahoma","sans-serif";}
.MsoChpDefault
	{font-family:"Calibri","sans-serif";}
.MsoPapDefault
	{margin-bottom:10.0pt;
	line-height:115%;}
@page WordSection1
	{size:595.3pt 841.9pt;
	margin:70.85pt 2.0cm 70.85pt 2.0cm;}
div.WordSection1
	{page:WordSection1;}
-->
</style>

</head>
		<#+
	}
#>
<#+ 
	#region Class Level Variable Block
	
	//CQRS_v1_0.DomainType CurrentDomain;
	
	#endregion
#>