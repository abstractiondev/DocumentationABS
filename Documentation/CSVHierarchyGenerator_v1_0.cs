// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace DocumentationABS.Documentation
{
    using System;
    using System.IO;
    using System.Xml;
    using System.Xml.Serialization;
    using System.Diagnostics;
    using System.Linq;
    using System.Xml.Linq;
    using System.Collections;
    using System.Collections.Generic;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\UserData\Kalle\work\abs\TheBallPlatform\Abstractions\DocumentationABS\Documentation\CSVHierarchyGenerator_v1_0.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class CSVHierarchyGenerator_v1_0 : CSVHierarchyGenerator_v1_0Base
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(" \r\n");
            
            #line 18 "D:\UserData\Kalle\work\abs\TheBallPlatform\Abstractions\DocumentationABS\Documentation\CSVHierarchyGenerator_v1_0.tt"
   
	GenerateDocument(CurrentDocument);

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
        
        #line 21 "D:\UserData\Kalle\work\abs\TheBallPlatform\Abstractions\DocumentationABS\Documentation\CSVHierarchyGenerator_v1_0.tt"
 
	public string CurrentXmlFile;
	
	public Tuple<string, string>[] GetGeneratorContent(params string[] xmlFileNames)
	{
		List<DocumentFile> result = new List<DocumentFile>();
		foreach(string xmlFileName in xmlFileNames)
		{
			DocumentationAbstractionType abs = LoadXml<DocumentationAbstractionType>(xmlFileName);
			foreach(DocumentType doc in abs.Documentations.Documents) {
				DocumentFile docFile = GenerateDocumentFile(doc);
				result.Add(docFile);
			}
		}
		return result.Select(docFile => Tuple.Create(docFile.Name, docFile.Content)).ToArray();
	}
	
	void GenerateDocument(DocumentType document)
	{
		foreach(HeaderType header in document.Content ?? new HeaderType[0])
			GenerateLastHeader(header, new HeaderType[0]);
	}
	
	private DocumentType CurrentDocument;
	
	public DocumentFile GenerateDocumentFile(DocumentType document)
	{
		DocumentFile result = new DocumentFile();
		GenerationEnvironment.Clear();
		result.Name = document.name + ".csv";
		CurrentDocument = document;
		result.Content = TransformText();
		return result;
	}
	
	public DocumentFile[] GenerateDocuments()
	{
		List<DocumentFile> result = new List<DocumentFile>();
		string templateDirectoryName = Path.GetDirectoryName(Host.TemplateFile);
		string directoryName = templateDirectoryName + @"\Content_v1_0";
		directoryName = directoryName.Replace("DocumentationABS", "AbstractionContent");
		string[] xmlFileNames = Directory.GetFiles(directoryName, "*.xml");
		foreach(string xmlFileName in xmlFileNames)
		{
			DocumentationAbstractionType abs = LoadXml<DocumentationAbstractionType>(xmlFileName);
			foreach(DocumentType doc in abs.Documentations.Documents) {
				DocumentFile docFile = GenerateDocumentFile(doc);
				result.Add(docFile);
			}
		}
		return result.ToArray();
	}
	
	void GenerateLastHeader(HeaderType header, HeaderType[] predeccors)
	{
		List<HeaderType> headerList = new List<HeaderType>(predeccors);
		headerList.Add(header);
		HeaderType[] headerListWithCurrent = headerList.ToArray();
		if(header.Header == null || header.Header.Length == 0) {
			string[] headerNames = headerListWithCurrent.Select(h => h.text).ToArray();
			string lineToOutput = string.Join(";", headerNames);
			this.GenerationEnvironment.AppendLine(lineToOutput);
		} else {
			foreach(HeaderType subHeader in header.Header)
			{
				GenerateLastHeader(subHeader, headerListWithCurrent);
			}	
		}
	}

	#region Class Level Variable Block
	
	//CQRS_v1_0.DomainType CurrentDomain;
	
	#endregion

        
        #line default
        #line hidden
        
        #line 1 "D:\UserData\Kalle\work\abs\TheBallPlatform\Abstractions\DocumentationABS\Documentation\..\Common\CommonCodeblocks.ttinclude"
 
	T LoadXml<T>(string xmlFileName) {
		using(FileStream fStream = File.OpenRead(xmlFileName)) {
			XmlSerializer serializer = new XmlSerializer(typeof(T));
			T result = (T) serializer.Deserialize(fStream);
			fStream.Close();
			return result;
		}
	}

	void BeginNamespace(string namespaceName) {
		
        
        #line default
        #line hidden
        
        #line 12 "D:\UserData\Kalle\work\abs\TheBallPlatform\Abstractions\DocumentationABS\Documentation\..\Common\CommonCodeblocks.ttinclude"
this.Write("namespace ");

        
        #line default
        #line hidden
        
        #line 12 "D:\UserData\Kalle\work\abs\TheBallPlatform\Abstractions\DocumentationABS\Documentation\..\Common\CommonCodeblocks.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(namespaceName));

        
        #line default
        #line hidden
        
        #line 12 "D:\UserData\Kalle\work\abs\TheBallPlatform\Abstractions\DocumentationABS\Documentation\..\Common\CommonCodeblocks.ttinclude"
this.Write(" { \r\n\t\t");

        
        #line default
        #line hidden
        
        #line 13 "D:\UserData\Kalle\work\abs\TheBallPlatform\Abstractions\DocumentationABS\Documentation\..\Common\CommonCodeblocks.ttinclude"
 
	}

	void EndBlock() {
		
        
        #line default
        #line hidden
        
        #line 17 "D:\UserData\Kalle\work\abs\TheBallPlatform\Abstractions\DocumentationABS\Documentation\..\Common\CommonCodeblocks.ttinclude"
this.Write(" } ");

        
        #line default
        #line hidden
        
        #line 17 "D:\UserData\Kalle\work\abs\TheBallPlatform\Abstractions\DocumentationABS\Documentation\..\Common\CommonCodeblocks.ttinclude"

	}

		
	static string RemoveScands(string sourceString) {
		return sourceString.Replace('ä', 'a').Replace('Ä', 'A').Replace('å', 'a').Replace('Å', 'A').Replace('ö', 'o').Replace('Ö', 'O');
	}
	
	public class GenerationItem
	{
		public string FileName;
		public string Content;
	}
	

        
        #line default
        #line hidden
        
        #line 1 "D:\UserData\Kalle\work\abs\TheBallPlatform\Abstractions\DocumentationABS\Documentation\Documentation_v1_0.ttinclude"

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Operation_v1_0.xsd")]
[System.Xml.Serialization.XmlRootAttribute("DocumentationAbstraction", Namespace="http://tempuri.org/Operation_v1_0.xsd", IsNullable=false)]
public partial class DocumentationAbstractionType {
    
    private DocumentationsType documentationsField;
    
    /// <remarks/>
    public DocumentationsType Documentations {
        get {
            return this.documentationsField;
        }
        set {
            this.documentationsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Operation_v1_0.xsd")]
public partial class DocumentationsType {
    
    private DocumentType[] documentsField;
    
    private PresentationsType presentationsField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlArrayItemAttribute("Document", IsNullable=false)]
    public DocumentType[] Documents {
        get {
            return this.documentsField;
        }
        set {
            this.documentsField = value;
        }
    }
    
    /// <remarks/>
    public PresentationsType Presentations {
        get {
            return this.presentationsField;
        }
        set {
            this.presentationsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Operation_v1_0.xsd")]
public partial class DocumentType {
    
    private StylesType stylesField;
    
    private HeaderType[] contentField;
    
    private string nameField;
    
    private string titleField;
    
    /// <remarks/>
    public StylesType Styles {
        get {
            return this.stylesField;
        }
        set {
            this.stylesField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlArrayItemAttribute("Header", IsNullable=false)]
    public HeaderType[] Content {
        get {
            return this.contentField;
        }
        set {
            this.contentField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string title {
        get {
            return this.titleField;
        }
        set {
            this.titleField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Operation_v1_0.xsd")]
public partial class StylesType {
    
    private StyleType styleField;
    
    /// <remarks/>
    public StyleType Style {
        get {
            return this.styleField;
        }
        set {
            this.styleField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Operation_v1_0.xsd")]
public partial class StyleType {
    
    private string nameField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Operation_v1_0.xsd")]
public partial class PresentationsType {
    
    private PresentationsTypePresentation presentationField;
    
    /// <remarks/>
    public PresentationsTypePresentation Presentation {
        get {
            return this.presentationField;
        }
        set {
            this.presentationField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tempuri.org/Operation_v1_0.xsd")]
public partial class PresentationsTypePresentation {
    
    private PresentationsTypePresentationSlides slidesField;
    
    private string nameField;
    
    private string titleField;
    
    /// <remarks/>
    public PresentationsTypePresentationSlides Slides {
        get {
            return this.slidesField;
        }
        set {
            this.slidesField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string title {
        get {
            return this.titleField;
        }
        set {
            this.titleField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tempuri.org/Operation_v1_0.xsd")]
public partial class PresentationsTypePresentationSlides {
    
    private object slideField;
    
    /// <remarks/>
    public object Slide {
        get {
            return this.slideField;
        }
        set {
            this.slideField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Operation_v1_0.xsd")]
public partial class ColumnType {
    
    private string nameField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Operation_v1_0.xsd")]
public partial class TableType {
    
    private ColumnType[] columnsField;
    
    private TextType[][] rowsField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlArrayItemAttribute("Column", IsNullable=false)]
    public ColumnType[] Columns {
        get {
            return this.columnsField;
        }
        set {
            this.columnsField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlArrayItemAttribute("Row", IsNullable=false)]
    [System.Xml.Serialization.XmlArrayItemAttribute("ColumnData", IsNullable=false, NestingLevel=1)]
    public TextType[][] Rows {
        get {
            return this.rowsField;
        }
        set {
            this.rowsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Operation_v1_0.xsd")]
public partial class TextType {
    
    private string textContentField;
    
    private string styleRefField;
    
    /// <remarks/>
    public string TextContent {
        get {
            return this.textContentField;
        }
        set {
            this.textContentField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string styleRef {
        get {
            return this.styleRefField;
        }
        set {
            this.styleRefField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Operation_v1_0.xsd")]
public partial class ParagraphType {
    
    private object itemField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("Table", typeof(TableType))]
    [System.Xml.Serialization.XmlElementAttribute("Text", typeof(TextType))]
    public object Item {
        get {
            return this.itemField;
        }
        set {
            this.itemField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Operation_v1_0.xsd")]
public partial class HeaderType {
    
    private ParagraphType[] paragraphField;
    
    private HeaderType[] headerField;
    
    private string textField;
    
    private int levelField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("Paragraph")]
    public ParagraphType[] Paragraph {
        get {
            return this.paragraphField;
        }
        set {
            this.paragraphField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("Header")]
    public HeaderType[] Header {
        get {
            return this.headerField;
        }
        set {
            this.headerField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string text {
        get {
            return this.textField;
        }
        set {
            this.textField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public int level {
        get {
            return this.levelField;
        }
        set {
            this.levelField = value;
        }
    }
}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class CSVHierarchyGenerator_v1_0Base
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
